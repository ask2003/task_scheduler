
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001280  08001280  00011280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012c8  080012c8  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080012c8  080012c8  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012c8  080012c8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012c8  080012c8  000112c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012cc  080012cc  000112cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080012d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          000001c0  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000220  20000220  00020060  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000e1e  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000057f  00000000  00000000  00020eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000200  00000000  00000000  00021470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000169  00000000  00000000  00021670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002dc9  00000000  00000000  000217d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001c98  00000000  00000000  000245a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009dba  00000000  00000000  0002623a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000d28  00000000  00000000  0002fff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  00030d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001268 	.word	0x08001268

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08001268 	.word	0x08001268

080001c8 <delay>:

#include<stdint.h>
#include "led.h"

void delay(uint32_t count)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  for(uint32_t i = 0 ; i < count ; i++);
 80001d0:	2300      	movs	r3, #0
 80001d2:	60fb      	str	r3, [r7, #12]
 80001d4:	e002      	b.n	80001dc <delay+0x14>
 80001d6:	68fb      	ldr	r3, [r7, #12]
 80001d8:	3301      	adds	r3, #1
 80001da:	60fb      	str	r3, [r7, #12]
 80001dc:	68fa      	ldr	r2, [r7, #12]
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	d3f8      	bcc.n	80001d6 <delay+0xe>
}
 80001e4:	bf00      	nop
 80001e6:	bf00      	nop
 80001e8:	3714      	adds	r7, #20
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr

080001f0 <led_init_all>:

void led_init_all(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 80001f6:	4b19      	ldr	r3, [pc, #100]	; (800025c <led_init_all+0x6c>)
 80001f8:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 80001fa:	4b19      	ldr	r3, [pc, #100]	; (8000260 <led_init_all+0x70>)
 80001fc:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f043 0208 	orr.w	r2, r3, #8
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 800023a:	200c      	movs	r0, #12
 800023c:	f000 f82a 	bl	8000294 <led_off>
    led_off(LED_ORANGE);
 8000240:	200d      	movs	r0, #13
 8000242:	f000 f827 	bl	8000294 <led_off>
    led_off(LED_RED);
 8000246:	200e      	movs	r0, #14
 8000248:	f000 f824 	bl	8000294 <led_off>
    led_off(LED_BLUE);
 800024c:	200f      	movs	r0, #15
 800024e:	f000 f821 	bl	8000294 <led_off>
}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40023830 	.word	0x40023830
 8000260:	40020c00 	.word	0x40020c00

08000264 <led_on>:

void led_on(uint8_t led_no)
{
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 800026e:	4b08      	ldr	r3, [pc, #32]	; (8000290 <led_on+0x2c>)
 8000270:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	79fa      	ldrb	r2, [r7, #7]
 8000278:	2101      	movs	r1, #1
 800027a:	fa01 f202 	lsl.w	r2, r1, r2
 800027e:	431a      	orrs	r2, r3
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	601a      	str	r2, [r3, #0]

}
 8000284:	bf00      	nop
 8000286:	3714      	adds	r7, #20
 8000288:	46bd      	mov	sp, r7
 800028a:	bc80      	pop	{r7}
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	40020c14 	.word	0x40020c14

08000294 <led_off>:

void led_off(uint8_t led_no)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 800029e:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <led_off+0x2c>)
 80002a0:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	79fa      	ldrb	r2, [r7, #7]
 80002a8:	2101      	movs	r1, #1
 80002aa:	fa01 f202 	lsl.w	r2, r1, r2
 80002ae:	43d2      	mvns	r2, r2
 80002b0:	401a      	ands	r2, r3
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	601a      	str	r2, [r3, #0]

}
 80002b6:	bf00      	nop
 80002b8:	3714      	adds	r7, #20
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	40020c14 	.word	0x40020c14

080002c4 <main>:

/* Each task has its own TCB */
TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0

	enable_processor_faults();
 80002c8:	f000 f926 	bl	8000518 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80002cc:	4807      	ldr	r0, [pc, #28]	; (80002ec <main+0x28>)
 80002ce:	f000 f88f 	bl	80003f0 <init_scheduler_stack>

	init_tasks_stack();
 80002d2:	f000 f893 	bl	80003fc <init_tasks_stack>

	led_init_all();
 80002d6:	f7ff ff8b 	bl	80001f0 <led_init_all>

	init_systick_timer(TICK_HZ);
 80002da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002de:	f000 f853 	bl	8000388 <init_systick_timer>

	switch_sp_to_psp();
 80002e2:	f000 f99f 	bl	8000624 <switch_sp_to_psp>

	task1_handler();
 80002e6:	f000 f807 	bl	80002f8 <task1_handler>

	for(;;);
 80002ea:	e7fe      	b.n	80002ea <main+0x26>
 80002ec:	2001ec00 	.word	0x2001ec00

080002f0 <idle_task>:
}


void idle_task(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	while(1);
 80002f4:	e7fe      	b.n	80002f4 <idle_task+0x4>
	...

080002f8 <task1_handler>:
}


void task1_handler(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 80002fc:	200c      	movs	r0, #12
 80002fe:	f7ff ffb1 	bl	8000264 <led_on>
		delay(DELAY_COUNT_1S);
 8000302:	4805      	ldr	r0, [pc, #20]	; (8000318 <task1_handler+0x20>)
 8000304:	f7ff ff60 	bl	80001c8 <delay>
		led_off(LED_GREEN);
 8000308:	200c      	movs	r0, #12
 800030a:	f7ff ffc3 	bl	8000294 <led_off>
		delay(DELAY_COUNT_1S);
 800030e:	4802      	ldr	r0, [pc, #8]	; (8000318 <task1_handler+0x20>)
 8000310:	f7ff ff5a 	bl	80001c8 <delay>
		led_on(LED_GREEN);
 8000314:	e7f2      	b.n	80002fc <task1_handler+0x4>
 8000316:	bf00      	nop
 8000318:	001312d0 	.word	0x001312d0

0800031c <task2_handler>:
	}

}

void task2_handler(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_ORANGE);
 8000320:	200d      	movs	r0, #13
 8000322:	f7ff ff9f 	bl	8000264 <led_on>
		delay(DELAY_COUNT_500MS);
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <task2_handler+0x20>)
 8000328:	f7ff ff4e 	bl	80001c8 <delay>
		led_off(LED_ORANGE);
 800032c:	200d      	movs	r0, #13
 800032e:	f7ff ffb1 	bl	8000294 <led_off>
		delay(DELAY_COUNT_500MS);
 8000332:	4802      	ldr	r0, [pc, #8]	; (800033c <task2_handler+0x20>)
 8000334:	f7ff ff48 	bl	80001c8 <delay>
		led_on(LED_ORANGE);
 8000338:	e7f2      	b.n	8000320 <task2_handler+0x4>
 800033a:	bf00      	nop
 800033c:	00098968 	.word	0x00098968

08000340 <task3_handler>:
	}

}

void task3_handler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 8000344:	200f      	movs	r0, #15
 8000346:	f7ff ff8d 	bl	8000264 <led_on>
		delay(DELAY_COUNT_250MS);
 800034a:	4805      	ldr	r0, [pc, #20]	; (8000360 <task3_handler+0x20>)
 800034c:	f7ff ff3c 	bl	80001c8 <delay>
		led_off(LED_BLUE);
 8000350:	200f      	movs	r0, #15
 8000352:	f7ff ff9f 	bl	8000294 <led_off>
		delay(DELAY_COUNT_250MS);
 8000356:	4802      	ldr	r0, [pc, #8]	; (8000360 <task3_handler+0x20>)
 8000358:	f7ff ff36 	bl	80001c8 <delay>
		led_on(LED_BLUE);
 800035c:	e7f2      	b.n	8000344 <task3_handler+0x4>
 800035e:	bf00      	nop
 8000360:	0004c4b4 	.word	0x0004c4b4

08000364 <task4_handler>:

}

void task4_handler(void)

{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 8000368:	200e      	movs	r0, #14
 800036a:	f7ff ff7b 	bl	8000264 <led_on>
		delay(DELAY_COUNT_125MS);
 800036e:	4805      	ldr	r0, [pc, #20]	; (8000384 <task4_handler+0x20>)
 8000370:	f7ff ff2a 	bl	80001c8 <delay>
		led_off(LED_RED);
 8000374:	200e      	movs	r0, #14
 8000376:	f7ff ff8d 	bl	8000294 <led_off>
		delay(DELAY_COUNT_125MS);
 800037a:	4802      	ldr	r0, [pc, #8]	; (8000384 <task4_handler+0x20>)
 800037c:	f7ff ff24 	bl	80001c8 <delay>
		led_on(LED_RED);
 8000380:	e7f2      	b.n	8000368 <task4_handler+0x4>
 8000382:	bf00      	nop
 8000384:	0002625a 	.word	0x0002625a

08000388 <init_systick_timer>:

}


void init_systick_timer(uint32_t tick_hz)
{
 8000388:	b480      	push	{r7}
 800038a:	b087      	sub	sp, #28
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <init_systick_timer+0x5c>)
 8000392:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 8000394:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <init_systick_timer+0x60>)
 8000396:	613b      	str	r3, [r7, #16]

    /* calculation of reload value */
    uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;
 8000398:	4a14      	ldr	r2, [pc, #80]	; (80003ec <init_systick_timer+0x64>)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	fbb2 f3f3 	udiv	r3, r2, r3
 80003a0:	3b01      	subs	r3, #1
 80003a2:	60fb      	str	r3, [r7, #12]

    //Clear the value of SVR
    *pSRVR &= ~(0x00FFFFFFFF);
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]

    //load the value in to SVR
    *pSRVR |= count_value;
 80003aa:	697b      	ldr	r3, [r7, #20]
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	431a      	orrs	r2, r3
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	601a      	str	r2, [r3, #0]

    //do some settings
    *pSCSR |= ( 1 << 1); //Enables SysTick exception request:
 80003b6:	693b      	ldr	r3, [r7, #16]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f043 0202 	orr.w	r2, r3, #2
 80003be:	693b      	ldr	r3, [r7, #16]
 80003c0:	601a      	str	r2, [r3, #0]
    *pSCSR |= ( 1 << 2);  //Indicates the clock source, processor clock source
 80003c2:	693b      	ldr	r3, [r7, #16]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f043 0204 	orr.w	r2, r3, #4
 80003ca:	693b      	ldr	r3, [r7, #16]
 80003cc:	601a      	str	r2, [r3, #0]

    //enable the systick
    *pSCSR |= ( 1 << 0); //enables the counter
 80003ce:	693b      	ldr	r3, [r7, #16]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f043 0201 	orr.w	r2, r3, #1
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	601a      	str	r2, [r3, #0]

}
 80003da:	bf00      	nop
 80003dc:	371c      	adds	r7, #28
 80003de:	46bd      	mov	sp, r7
 80003e0:	bc80      	pop	{r7}
 80003e2:	4770      	bx	lr
 80003e4:	e000e014 	.word	0xe000e014
 80003e8:	e000e010 	.word	0xe000e010
 80003ec:	00f42400 	.word	0x00f42400

080003f0 <init_scheduler_stack>:


__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 80003f0:	4603      	mov	r3, r0
     __asm volatile("MSR MSP,%0": :  "r" (sched_top_of_stack)  :   );
 80003f2:	f383 8808 	msr	MSP, r3
     __asm volatile("BX LR");
 80003f6:	4770      	bx	lr

}
 80003f8:	bf00      	nop
	...

080003fc <init_tasks_stack>:


/* this function stores dummy stack contents for each task */

void init_tasks_stack(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0

	user_tasks[0].current_state = TASK_READY_STATE;
 8000402:	4b3a      	ldr	r3, [pc, #232]	; (80004ec <init_tasks_stack+0xf0>)
 8000404:	2200      	movs	r2, #0
 8000406:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 8000408:	4b38      	ldr	r3, [pc, #224]	; (80004ec <init_tasks_stack+0xf0>)
 800040a:	2200      	movs	r2, #0
 800040c:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 800040e:	4b37      	ldr	r3, [pc, #220]	; (80004ec <init_tasks_stack+0xf0>)
 8000410:	2200      	movs	r2, #0
 8000412:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 8000416:	4b35      	ldr	r3, [pc, #212]	; (80004ec <init_tasks_stack+0xf0>)
 8000418:	2200      	movs	r2, #0
 800041a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 800041e:	4b33      	ldr	r3, [pc, #204]	; (80004ec <init_tasks_stack+0xf0>)
 8000420:	2200      	movs	r2, #0
 8000422:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 8000426:	4b31      	ldr	r3, [pc, #196]	; (80004ec <init_tasks_stack+0xf0>)
 8000428:	4a31      	ldr	r2, [pc, #196]	; (80004f0 <init_tasks_stack+0xf4>)
 800042a:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 800042c:	4b2f      	ldr	r3, [pc, #188]	; (80004ec <init_tasks_stack+0xf0>)
 800042e:	4a31      	ldr	r2, [pc, #196]	; (80004f4 <init_tasks_stack+0xf8>)
 8000430:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 8000432:	4b2e      	ldr	r3, [pc, #184]	; (80004ec <init_tasks_stack+0xf0>)
 8000434:	4a30      	ldr	r2, [pc, #192]	; (80004f8 <init_tasks_stack+0xfc>)
 8000436:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 8000438:	4b2c      	ldr	r3, [pc, #176]	; (80004ec <init_tasks_stack+0xf0>)
 800043a:	4a30      	ldr	r2, [pc, #192]	; (80004fc <init_tasks_stack+0x100>)
 800043c:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 800043e:	4b2b      	ldr	r3, [pc, #172]	; (80004ec <init_tasks_stack+0xf0>)
 8000440:	4a2f      	ldr	r2, [pc, #188]	; (8000500 <init_tasks_stack+0x104>)
 8000442:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 8000444:	4b29      	ldr	r3, [pc, #164]	; (80004ec <init_tasks_stack+0xf0>)
 8000446:	4a2f      	ldr	r2, [pc, #188]	; (8000504 <init_tasks_stack+0x108>)
 8000448:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 800044a:	4b28      	ldr	r3, [pc, #160]	; (80004ec <init_tasks_stack+0xf0>)
 800044c:	4a2e      	ldr	r2, [pc, #184]	; (8000508 <init_tasks_stack+0x10c>)
 800044e:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 8000450:	4b26      	ldr	r3, [pc, #152]	; (80004ec <init_tasks_stack+0xf0>)
 8000452:	4a2e      	ldr	r2, [pc, #184]	; (800050c <init_tasks_stack+0x110>)
 8000454:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 8000456:	4b25      	ldr	r3, [pc, #148]	; (80004ec <init_tasks_stack+0xf0>)
 8000458:	4a2d      	ldr	r2, [pc, #180]	; (8000510 <init_tasks_stack+0x114>)
 800045a:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 800045c:	4b23      	ldr	r3, [pc, #140]	; (80004ec <init_tasks_stack+0xf0>)
 800045e:	4a2d      	ldr	r2, [pc, #180]	; (8000514 <init_tasks_stack+0x118>)
 8000460:	64da      	str	r2, [r3, #76]	; 0x4c


	uint32_t *pPSP;

	for(int i = 0 ; i < MAX_TASKS ;i++)
 8000462:	2300      	movs	r3, #0
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	e037      	b.n	80004d8 <init_tasks_stack+0xdc>
	{
		pPSP = (uint32_t*) user_tasks[i].psp_value;
 8000468:	4a20      	ldr	r2, [pc, #128]	; (80004ec <init_tasks_stack+0xf0>)
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	011b      	lsls	r3, r3, #4
 800046e:	4413      	add	r3, r2
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	60fb      	str	r3, [r7, #12]

		pPSP--;
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	3b04      	subs	r3, #4
 8000478:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR;//0x01000000
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000480:	601a      	str	r2, [r3, #0]

		pPSP--; //PC
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	3b04      	subs	r3, #4
 8000486:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 8000488:	4a18      	ldr	r2, [pc, #96]	; (80004ec <init_tasks_stack+0xf0>)
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	011b      	lsls	r3, r3, #4
 800048e:	4413      	add	r3, r2
 8000490:	330c      	adds	r3, #12
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	461a      	mov	r2, r3
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	601a      	str	r2, [r3, #0]

		pPSP--; //LR
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	3b04      	subs	r3, #4
 800049e:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	f06f 0202 	mvn.w	r2, #2
 80004a6:	601a      	str	r2, [r3, #0]

		for(int j = 0 ; j < 13 ; j++)
 80004a8:	2300      	movs	r3, #0
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	e008      	b.n	80004c0 <init_tasks_stack+0xc4>
		{
			pPSP--;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	3b04      	subs	r3, #4
 80004b2:	60fb      	str	r3, [r7, #12]
		    *pPSP = 0;
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	2200      	movs	r2, #0
 80004b8:	601a      	str	r2, [r3, #0]
		for(int j = 0 ; j < 13 ; j++)
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	3301      	adds	r3, #1
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2b0c      	cmp	r3, #12
 80004c4:	ddf3      	ble.n	80004ae <init_tasks_stack+0xb2>

		}

		user_tasks[i].psp_value = (uint32_t)pPSP;
 80004c6:	68fa      	ldr	r2, [r7, #12]
 80004c8:	4908      	ldr	r1, [pc, #32]	; (80004ec <init_tasks_stack+0xf0>)
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	011b      	lsls	r3, r3, #4
 80004ce:	440b      	add	r3, r1
 80004d0:	601a      	str	r2, [r3, #0]
	for(int i = 0 ; i < MAX_TASKS ;i++)
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	3301      	adds	r3, #1
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	2b04      	cmp	r3, #4
 80004dc:	ddc4      	ble.n	8000468 <init_tasks_stack+0x6c>


	}

}
 80004de:	bf00      	nop
 80004e0:	bf00      	nop
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000080 	.word	0x20000080
 80004f0:	2001f000 	.word	0x2001f000
 80004f4:	20020000 	.word	0x20020000
 80004f8:	2001fc00 	.word	0x2001fc00
 80004fc:	2001f800 	.word	0x2001f800
 8000500:	2001f400 	.word	0x2001f400
 8000504:	080002f1 	.word	0x080002f1
 8000508:	080002f9 	.word	0x080002f9
 800050c:	0800031d 	.word	0x0800031d
 8000510:	08000341 	.word	0x08000341
 8000514:	08000365 	.word	0x08000365

08000518 <enable_processor_faults>:

void enable_processor_faults(void)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <enable_processor_faults+0x38>)
 8000520:	607b      	str	r3, [r7, #4]

	*pSHCSR |= ( 1 << 16); //mem manage
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 17); //bus fault
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	601a      	str	r2, [r3, #0]
	*pSHCSR |= ( 1 << 18); //usage fault
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	601a      	str	r2, [r3, #0]
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	e000ed24 	.word	0xe000ed24

08000554 <get_psp_value>:


uint32_t get_psp_value(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

	return user_tasks[current_task].psp_value;
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <get_psp_value+0x18>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <get_psp_value+0x1c>)
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	4413      	add	r3, r2
 8000562:	681b      	ldr	r3, [r3, #0]
}
 8000564:	4618      	mov	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	20000000 	.word	0x20000000
 8000570:	20000080 	.word	0x20000080

08000574 <save_psp_value>:


void save_psp_value(uint32_t current_psp_value)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <save_psp_value+0x20>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4a05      	ldr	r2, [pc, #20]	; (8000598 <save_psp_value+0x24>)
 8000582:	011b      	lsls	r3, r3, #4
 8000584:	4413      	add	r3, r2
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	601a      	str	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	20000000 	.word	0x20000000
 8000598:	20000080 	.word	0x20000080

0800059c <update_next_task>:


void update_next_task(void)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 80005a2:	23ff      	movs	r3, #255	; 0xff
 80005a4:	607b      	str	r3, [r7, #4]

	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 80005a6:	2300      	movs	r3, #0
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	e024      	b.n	80005f6 <update_next_task+0x5a>
	{
		current_task++;
 80005ac:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <update_next_task+0x7c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b18      	ldr	r3, [pc, #96]	; (8000618 <update_next_task+0x7c>)
 80005b6:	701a      	strb	r2, [r3, #0]
	    current_task %= MAX_TASKS;
 80005b8:	4b17      	ldr	r3, [pc, #92]	; (8000618 <update_next_task+0x7c>)
 80005ba:	781a      	ldrb	r2, [r3, #0]
 80005bc:	4b17      	ldr	r3, [pc, #92]	; (800061c <update_next_task+0x80>)
 80005be:	fba3 1302 	umull	r1, r3, r3, r2
 80005c2:	0899      	lsrs	r1, r3, #2
 80005c4:	460b      	mov	r3, r1
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	440b      	add	r3, r1
 80005ca:	1ad3      	subs	r3, r2, r3
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <update_next_task+0x7c>)
 80005d0:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <update_next_task+0x7c>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <update_next_task+0x84>)
 80005d8:	011b      	lsls	r3, r3, #4
 80005da:	4413      	add	r3, r2
 80005dc:	3308      	adds	r3, #8
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	607b      	str	r3, [r7, #4]
		if( (state == TASK_READY_STATE) && (current_task != 0) )
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d103      	bne.n	80005f0 <update_next_task+0x54>
 80005e8:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <update_next_task+0x7c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d106      	bne.n	80005fe <update_next_task+0x62>
	for(int i= 0 ; i < (MAX_TASKS) ; i++)
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	ddd7      	ble.n	80005ac <update_next_task+0x10>
 80005fc:	e000      	b.n	8000600 <update_next_task+0x64>
			break;
 80005fe:	bf00      	nop
	}

	if(state != TASK_READY_STATE)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d002      	beq.n	800060c <update_next_task+0x70>
		current_task = 0;
 8000606:	4b04      	ldr	r3, [pc, #16]	; (8000618 <update_next_task+0x7c>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000000 	.word	0x20000000
 800061c:	cccccccd 	.word	0xcccccccd
 8000620:	20000080 	.word	0x20000080

08000624 <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)
{
    //1. initialize the PSP with TASK1 stack start address

	//get the value of psp of current_task
	__asm volatile ("PUSH {LR}"); //preserve LR which connects back to main()
 8000624:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 8000626:	f7ff ff95 	bl	8000554 <get_psp_value>
	__asm volatile ("MSR PSP,R0"); //initialize psp
 800062a:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");  //pops back LR value
 800062e:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0X02");
 8000632:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 8000636:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 800063a:	4770      	bx	lr
}
 800063c:	bf00      	nop

0800063e <PendSV_Handler>:
{

	/*Save the context of current task */

	//1. Get current running task's PSP value
	__asm volatile("MRS R0,PSP");
 800063e:	f3ef 8009 	mrs	r0, PSP
	//2. Using that PSP value store SF2( R4 to R11)
	__asm volatile("STMDB R0!,{R4-R11}");
 8000642:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile("PUSH {LR}");
 8000646:	b500      	push	{lr}

	//3. Save the current value of PSP
    __asm volatile("BL save_psp_value");
 8000648:	f7ff ff94 	bl	8000574 <save_psp_value>


	/*Retrieve the context of next task */

	//1. Decide next task to run
    __asm volatile("BL update_next_task");
 800064c:	f7ff ffa6 	bl	800059c <update_next_task>

	//2. get its past PSP value
	__asm volatile ("BL get_psp_value");
 8000650:	f7ff ff80 	bl	8000554 <get_psp_value>

	//3. Using that PSP value retrieve SF2(R4 to R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");
 8000654:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//4. update PSP and exit
	__asm volatile("MSR PSP,R0");
 8000658:	f380 8809 	msr	PSP, r0

	__asm volatile("POP {LR}");
 800065c:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile("BX LR");
 8000660:	4770      	bx	lr



}
 8000662:	bf00      	nop

08000664 <update_global_tick_count>:


void update_global_tick_count(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
	g_tick_count++;
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <update_global_tick_count+0x18>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3301      	adds	r3, #1
 800066e:	4a03      	ldr	r2, [pc, #12]	; (800067c <update_global_tick_count+0x18>)
 8000670:	6013      	str	r3, [r2, #0]
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	2000007c 	.word	0x2000007c

08000680 <unblock_tasks>:

void unblock_tasks(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
	for(int i = 1 ; i < MAX_TASKS ; i++)
 8000686:	2301      	movs	r3, #1
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	e01b      	b.n	80006c4 <unblock_tasks+0x44>
	{
		if(user_tasks[i].current_state != TASK_READY_STATE)
 800068c:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <unblock_tasks+0x58>)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	011b      	lsls	r3, r3, #4
 8000692:	4413      	add	r3, r2
 8000694:	3308      	adds	r3, #8
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d010      	beq.n	80006be <unblock_tasks+0x3e>
		{
			if(user_tasks[i].block_count == g_tick_count)
 800069c:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <unblock_tasks+0x58>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	011b      	lsls	r3, r3, #4
 80006a2:	4413      	add	r3, r2
 80006a4:	3304      	adds	r3, #4
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <unblock_tasks+0x5c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d106      	bne.n	80006be <unblock_tasks+0x3e>
			{
				user_tasks[i].current_state = TASK_READY_STATE;
 80006b0:	4a09      	ldr	r2, [pc, #36]	; (80006d8 <unblock_tasks+0x58>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	011b      	lsls	r3, r3, #4
 80006b6:	4413      	add	r3, r2
 80006b8:	3308      	adds	r3, #8
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
	for(int i = 1 ; i < MAX_TASKS ; i++)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	3301      	adds	r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	dde0      	ble.n	800068c <unblock_tasks+0xc>
			}
		}

	}

}
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000080 	.word	0x20000080
 80006dc:	2000007c 	.word	0x2000007c

080006e0 <SysTick_Handler>:


void  SysTick_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

	uint32_t *pICSR = (uint32_t*) (0xE000ED04);
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <SysTick_Handler+0x28>)
 80006e8:	607b      	str	r3, [r7, #4]

    update_global_tick_count();
 80006ea:	f7ff ffbb 	bl	8000664 <update_global_tick_count>

    unblock_tasks();
 80006ee:	f7ff ffc7 	bl	8000680 <unblock_tasks>

    //pend the pendsv exception
    *pICSR |= ( 1 << 28);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	601a      	str	r2, [r3, #0]
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	e000ed04 	.word	0xe000ed04

0800070c <HardFault_Handler>:

//2. implement the fault handlers
void HardFault_Handler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 8000710:	4801      	ldr	r0, [pc, #4]	; (8000718 <HardFault_Handler+0xc>)
 8000712:	f000 fa19 	bl	8000b48 <puts>
	while(1);
 8000716:	e7fe      	b.n	8000716 <HardFault_Handler+0xa>
 8000718:	08001280 	.word	0x08001280

0800071c <MemManage_Handler>:
}


void MemManage_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 8000720:	4801      	ldr	r0, [pc, #4]	; (8000728 <MemManage_Handler+0xc>)
 8000722:	f000 fa11 	bl	8000b48 <puts>
	while(1);
 8000726:	e7fe      	b.n	8000726 <MemManage_Handler+0xa>
 8000728:	08001298 	.word	0x08001298

0800072c <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 8000730:	4801      	ldr	r0, [pc, #4]	; (8000738 <BusFault_Handler+0xc>)
 8000732:	f000 fa09 	bl	8000b48 <puts>
	while(1);
 8000736:	e7fe      	b.n	8000736 <BusFault_Handler+0xa>
 8000738:	080012b0 	.word	0x080012b0

0800073c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <ITM_SendChar+0x44>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a0d      	ldr	r2, [pc, #52]	; (8000780 <ITM_SendChar+0x44>)
 800074c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000750:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000752:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <ITM_SendChar+0x48>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a0b      	ldr	r2, [pc, #44]	; (8000784 <ITM_SendChar+0x48>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800075e:	bf00      	nop
 8000760:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	2b00      	cmp	r3, #0
 800076c:	d0f8      	beq.n	8000760 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800076e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	6013      	str	r3, [r2, #0]
}
 8000776:	bf00      	nop
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	e000edfc 	.word	0xe000edfc
 8000784:	e0000e00 	.word	0xe0000e00

08000788 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	e00a      	b.n	80007b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800079a:	f3af 8000 	nop.w
 800079e:	4601      	mov	r1, r0
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	1c5a      	adds	r2, r3, #1
 80007a4:	60ba      	str	r2, [r7, #8]
 80007a6:	b2ca      	uxtb	r2, r1
 80007a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	3301      	adds	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	dbf0      	blt.n	800079a <_read+0x12>
	}

return len;
 80007b8:	687b      	ldr	r3, [r7, #4]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b086      	sub	sp, #24
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	60f8      	str	r0, [r7, #12]
 80007ca:	60b9      	str	r1, [r7, #8]
 80007cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
 80007d2:	e009      	b.n	80007e8 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	1c5a      	adds	r2, r3, #1
 80007d8:	60ba      	str	r2, [r7, #8]
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ffad 	bl	800073c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	3301      	adds	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	dbf1      	blt.n	80007d4 <_write+0x12>
	}
	return len;
 80007f0:	687b      	ldr	r3, [r7, #4]
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}

080007fa <_close>:

int _close(int file)
{
 80007fa:	b480      	push	{r7}
 80007fc:	b083      	sub	sp, #12
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
	return -1;
 8000802:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000820:	605a      	str	r2, [r3, #4]
	return 0;
 8000822:	2300      	movs	r3, #0
}
 8000824:	4618      	mov	r0, r3
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr

0800082e <_isatty>:

int _isatty(int file)
{
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
	return 1;
 8000836:	2301      	movs	r3, #1
}
 8000838:	4618      	mov	r0, r3
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr

08000842 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000842:	b480      	push	{r7}
 8000844:	b085      	sub	sp, #20
 8000846:	af00      	add	r7, sp, #0
 8000848:	60f8      	str	r0, [r7, #12]
 800084a:	60b9      	str	r1, [r7, #8]
 800084c:	607a      	str	r2, [r7, #4]
	return 0;
 800084e:	2300      	movs	r3, #0
}
 8000850:	4618      	mov	r0, r3
 8000852:	3714      	adds	r7, #20
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
	...

0800085c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000864:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <_sbrk+0x5c>)
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <_sbrk+0x60>)
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d102      	bne.n	800087e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <_sbrk+0x64>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <_sbrk+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	429a      	cmp	r2, r3
 800088a:	d207      	bcs.n	800089c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800088c:	f000 fa8a 	bl	8000da4 <__errno>
 8000890:	4603      	mov	r3, r0
 8000892:	220c      	movs	r2, #12
 8000894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	e009      	b.n	80008b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <_sbrk+0x64>)
 80008ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20020000 	.word	0x20020000
 80008bc:	00000400 	.word	0x00000400
 80008c0:	200000d0 	.word	0x200000d0
 80008c4:	20000220 	.word	0x20000220

080008c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008c8:	480d      	ldr	r0, [pc, #52]	; (8000900 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008ca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80008cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <LoopForever+0x6>)
  ldr r1, =_edata
 80008d2:	490d      	ldr	r1, [pc, #52]	; (8000908 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d4:	4a0d      	ldr	r2, [pc, #52]	; (800090c <LoopForever+0xe>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e8:	4c0a      	ldr	r4, [pc, #40]	; (8000914 <LoopForever+0x16>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008f6:	f000 fa5b 	bl	8000db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008fa:	f7ff fce3 	bl	80002c4 <main>

080008fe <LoopForever>:

LoopForever:
  b LoopForever
 80008fe:	e7fe      	b.n	80008fe <LoopForever>
  ldr   r0, =_estack
 8000900:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800090c:	080012d0 	.word	0x080012d0
  ldr r2, =_sbss
 8000910:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000914:	20000220 	.word	0x20000220

08000918 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC_IRQHandler>
	...

0800091c <std>:
 800091c:	2300      	movs	r3, #0
 800091e:	b510      	push	{r4, lr}
 8000920:	4604      	mov	r4, r0
 8000922:	e9c0 3300 	strd	r3, r3, [r0]
 8000926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800092a:	6083      	str	r3, [r0, #8]
 800092c:	8181      	strh	r1, [r0, #12]
 800092e:	6643      	str	r3, [r0, #100]	; 0x64
 8000930:	81c2      	strh	r2, [r0, #14]
 8000932:	6183      	str	r3, [r0, #24]
 8000934:	4619      	mov	r1, r3
 8000936:	2208      	movs	r2, #8
 8000938:	305c      	adds	r0, #92	; 0x5c
 800093a:	f000 f9e5 	bl	8000d08 <memset>
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <std+0x58>)
 8000940:	6263      	str	r3, [r4, #36]	; 0x24
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <std+0x5c>)
 8000944:	62a3      	str	r3, [r4, #40]	; 0x28
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <std+0x60>)
 8000948:	62e3      	str	r3, [r4, #44]	; 0x2c
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <std+0x64>)
 800094c:	6323      	str	r3, [r4, #48]	; 0x30
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <std+0x68>)
 8000950:	6224      	str	r4, [r4, #32]
 8000952:	429c      	cmp	r4, r3
 8000954:	d006      	beq.n	8000964 <std+0x48>
 8000956:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800095a:	4294      	cmp	r4, r2
 800095c:	d002      	beq.n	8000964 <std+0x48>
 800095e:	33d0      	adds	r3, #208	; 0xd0
 8000960:	429c      	cmp	r4, r3
 8000962:	d105      	bne.n	8000970 <std+0x54>
 8000964:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800096c:	f000 ba44 	b.w	8000df8 <__retarget_lock_init_recursive>
 8000970:	bd10      	pop	{r4, pc}
 8000972:	bf00      	nop
 8000974:	08000b59 	.word	0x08000b59
 8000978:	08000b7b 	.word	0x08000b7b
 800097c:	08000bb3 	.word	0x08000bb3
 8000980:	08000bd7 	.word	0x08000bd7
 8000984:	200000d4 	.word	0x200000d4

08000988 <stdio_exit_handler>:
 8000988:	4a02      	ldr	r2, [pc, #8]	; (8000994 <stdio_exit_handler+0xc>)
 800098a:	4903      	ldr	r1, [pc, #12]	; (8000998 <stdio_exit_handler+0x10>)
 800098c:	4803      	ldr	r0, [pc, #12]	; (800099c <stdio_exit_handler+0x14>)
 800098e:	f000 b869 	b.w	8000a64 <_fwalk_sglue>
 8000992:	bf00      	nop
 8000994:	20000004 	.word	0x20000004
 8000998:	080010f1 	.word	0x080010f1
 800099c:	20000010 	.word	0x20000010

080009a0 <cleanup_stdio>:
 80009a0:	6841      	ldr	r1, [r0, #4]
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <cleanup_stdio+0x34>)
 80009a4:	4299      	cmp	r1, r3
 80009a6:	b510      	push	{r4, lr}
 80009a8:	4604      	mov	r4, r0
 80009aa:	d001      	beq.n	80009b0 <cleanup_stdio+0x10>
 80009ac:	f000 fba0 	bl	80010f0 <_fflush_r>
 80009b0:	68a1      	ldr	r1, [r4, #8]
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <cleanup_stdio+0x38>)
 80009b4:	4299      	cmp	r1, r3
 80009b6:	d002      	beq.n	80009be <cleanup_stdio+0x1e>
 80009b8:	4620      	mov	r0, r4
 80009ba:	f000 fb99 	bl	80010f0 <_fflush_r>
 80009be:	68e1      	ldr	r1, [r4, #12]
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <cleanup_stdio+0x3c>)
 80009c2:	4299      	cmp	r1, r3
 80009c4:	d004      	beq.n	80009d0 <cleanup_stdio+0x30>
 80009c6:	4620      	mov	r0, r4
 80009c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009cc:	f000 bb90 	b.w	80010f0 <_fflush_r>
 80009d0:	bd10      	pop	{r4, pc}
 80009d2:	bf00      	nop
 80009d4:	200000d4 	.word	0x200000d4
 80009d8:	2000013c 	.word	0x2000013c
 80009dc:	200001a4 	.word	0x200001a4

080009e0 <global_stdio_init.part.0>:
 80009e0:	b510      	push	{r4, lr}
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <global_stdio_init.part.0+0x30>)
 80009e4:	4c0b      	ldr	r4, [pc, #44]	; (8000a14 <global_stdio_init.part.0+0x34>)
 80009e6:	4a0c      	ldr	r2, [pc, #48]	; (8000a18 <global_stdio_init.part.0+0x38>)
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	4620      	mov	r0, r4
 80009ec:	2200      	movs	r2, #0
 80009ee:	2104      	movs	r1, #4
 80009f0:	f7ff ff94 	bl	800091c <std>
 80009f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80009f8:	2201      	movs	r2, #1
 80009fa:	2109      	movs	r1, #9
 80009fc:	f7ff ff8e 	bl	800091c <std>
 8000a00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000a04:	2202      	movs	r2, #2
 8000a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a0a:	2112      	movs	r1, #18
 8000a0c:	f7ff bf86 	b.w	800091c <std>
 8000a10:	2000020c 	.word	0x2000020c
 8000a14:	200000d4 	.word	0x200000d4
 8000a18:	08000989 	.word	0x08000989

08000a1c <__sfp_lock_acquire>:
 8000a1c:	4801      	ldr	r0, [pc, #4]	; (8000a24 <__sfp_lock_acquire+0x8>)
 8000a1e:	f000 b9ec 	b.w	8000dfa <__retarget_lock_acquire_recursive>
 8000a22:	bf00      	nop
 8000a24:	20000215 	.word	0x20000215

08000a28 <__sfp_lock_release>:
 8000a28:	4801      	ldr	r0, [pc, #4]	; (8000a30 <__sfp_lock_release+0x8>)
 8000a2a:	f000 b9e7 	b.w	8000dfc <__retarget_lock_release_recursive>
 8000a2e:	bf00      	nop
 8000a30:	20000215 	.word	0x20000215

08000a34 <__sinit>:
 8000a34:	b510      	push	{r4, lr}
 8000a36:	4604      	mov	r4, r0
 8000a38:	f7ff fff0 	bl	8000a1c <__sfp_lock_acquire>
 8000a3c:	6a23      	ldr	r3, [r4, #32]
 8000a3e:	b11b      	cbz	r3, 8000a48 <__sinit+0x14>
 8000a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a44:	f7ff bff0 	b.w	8000a28 <__sfp_lock_release>
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <__sinit+0x28>)
 8000a4a:	6223      	str	r3, [r4, #32]
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <__sinit+0x2c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1f5      	bne.n	8000a40 <__sinit+0xc>
 8000a54:	f7ff ffc4 	bl	80009e0 <global_stdio_init.part.0>
 8000a58:	e7f2      	b.n	8000a40 <__sinit+0xc>
 8000a5a:	bf00      	nop
 8000a5c:	080009a1 	.word	0x080009a1
 8000a60:	2000020c 	.word	0x2000020c

08000a64 <_fwalk_sglue>:
 8000a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a68:	4607      	mov	r7, r0
 8000a6a:	4688      	mov	r8, r1
 8000a6c:	4614      	mov	r4, r2
 8000a6e:	2600      	movs	r6, #0
 8000a70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a74:	f1b9 0901 	subs.w	r9, r9, #1
 8000a78:	d505      	bpl.n	8000a86 <_fwalk_sglue+0x22>
 8000a7a:	6824      	ldr	r4, [r4, #0]
 8000a7c:	2c00      	cmp	r4, #0
 8000a7e:	d1f7      	bne.n	8000a70 <_fwalk_sglue+0xc>
 8000a80:	4630      	mov	r0, r6
 8000a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a86:	89ab      	ldrh	r3, [r5, #12]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d907      	bls.n	8000a9c <_fwalk_sglue+0x38>
 8000a8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a90:	3301      	adds	r3, #1
 8000a92:	d003      	beq.n	8000a9c <_fwalk_sglue+0x38>
 8000a94:	4629      	mov	r1, r5
 8000a96:	4638      	mov	r0, r7
 8000a98:	47c0      	blx	r8
 8000a9a:	4306      	orrs	r6, r0
 8000a9c:	3568      	adds	r5, #104	; 0x68
 8000a9e:	e7e9      	b.n	8000a74 <_fwalk_sglue+0x10>

08000aa0 <_puts_r>:
 8000aa0:	6a03      	ldr	r3, [r0, #32]
 8000aa2:	b570      	push	{r4, r5, r6, lr}
 8000aa4:	6884      	ldr	r4, [r0, #8]
 8000aa6:	4605      	mov	r5, r0
 8000aa8:	460e      	mov	r6, r1
 8000aaa:	b90b      	cbnz	r3, 8000ab0 <_puts_r+0x10>
 8000aac:	f7ff ffc2 	bl	8000a34 <__sinit>
 8000ab0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000ab2:	07db      	lsls	r3, r3, #31
 8000ab4:	d405      	bmi.n	8000ac2 <_puts_r+0x22>
 8000ab6:	89a3      	ldrh	r3, [r4, #12]
 8000ab8:	0598      	lsls	r0, r3, #22
 8000aba:	d402      	bmi.n	8000ac2 <_puts_r+0x22>
 8000abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000abe:	f000 f99c 	bl	8000dfa <__retarget_lock_acquire_recursive>
 8000ac2:	89a3      	ldrh	r3, [r4, #12]
 8000ac4:	0719      	lsls	r1, r3, #28
 8000ac6:	d513      	bpl.n	8000af0 <_puts_r+0x50>
 8000ac8:	6923      	ldr	r3, [r4, #16]
 8000aca:	b18b      	cbz	r3, 8000af0 <_puts_r+0x50>
 8000acc:	3e01      	subs	r6, #1
 8000ace:	68a3      	ldr	r3, [r4, #8]
 8000ad0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	60a3      	str	r3, [r4, #8]
 8000ad8:	b9e9      	cbnz	r1, 8000b16 <_puts_r+0x76>
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	da2e      	bge.n	8000b3c <_puts_r+0x9c>
 8000ade:	4622      	mov	r2, r4
 8000ae0:	210a      	movs	r1, #10
 8000ae2:	4628      	mov	r0, r5
 8000ae4:	f000 f87b 	bl	8000bde <__swbuf_r>
 8000ae8:	3001      	adds	r0, #1
 8000aea:	d007      	beq.n	8000afc <_puts_r+0x5c>
 8000aec:	250a      	movs	r5, #10
 8000aee:	e007      	b.n	8000b00 <_puts_r+0x60>
 8000af0:	4621      	mov	r1, r4
 8000af2:	4628      	mov	r0, r5
 8000af4:	f000 f8b0 	bl	8000c58 <__swsetup_r>
 8000af8:	2800      	cmp	r0, #0
 8000afa:	d0e7      	beq.n	8000acc <_puts_r+0x2c>
 8000afc:	f04f 35ff 	mov.w	r5, #4294967295
 8000b00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b02:	07da      	lsls	r2, r3, #31
 8000b04:	d405      	bmi.n	8000b12 <_puts_r+0x72>
 8000b06:	89a3      	ldrh	r3, [r4, #12]
 8000b08:	059b      	lsls	r3, r3, #22
 8000b0a:	d402      	bmi.n	8000b12 <_puts_r+0x72>
 8000b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b0e:	f000 f975 	bl	8000dfc <__retarget_lock_release_recursive>
 8000b12:	4628      	mov	r0, r5
 8000b14:	bd70      	pop	{r4, r5, r6, pc}
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	da04      	bge.n	8000b24 <_puts_r+0x84>
 8000b1a:	69a2      	ldr	r2, [r4, #24]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dc06      	bgt.n	8000b2e <_puts_r+0x8e>
 8000b20:	290a      	cmp	r1, #10
 8000b22:	d004      	beq.n	8000b2e <_puts_r+0x8e>
 8000b24:	6823      	ldr	r3, [r4, #0]
 8000b26:	1c5a      	adds	r2, r3, #1
 8000b28:	6022      	str	r2, [r4, #0]
 8000b2a:	7019      	strb	r1, [r3, #0]
 8000b2c:	e7cf      	b.n	8000ace <_puts_r+0x2e>
 8000b2e:	4622      	mov	r2, r4
 8000b30:	4628      	mov	r0, r5
 8000b32:	f000 f854 	bl	8000bde <__swbuf_r>
 8000b36:	3001      	adds	r0, #1
 8000b38:	d1c9      	bne.n	8000ace <_puts_r+0x2e>
 8000b3a:	e7df      	b.n	8000afc <_puts_r+0x5c>
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	250a      	movs	r5, #10
 8000b40:	1c5a      	adds	r2, r3, #1
 8000b42:	6022      	str	r2, [r4, #0]
 8000b44:	701d      	strb	r5, [r3, #0]
 8000b46:	e7db      	b.n	8000b00 <_puts_r+0x60>

08000b48 <puts>:
 8000b48:	4b02      	ldr	r3, [pc, #8]	; (8000b54 <puts+0xc>)
 8000b4a:	4601      	mov	r1, r0
 8000b4c:	6818      	ldr	r0, [r3, #0]
 8000b4e:	f7ff bfa7 	b.w	8000aa0 <_puts_r>
 8000b52:	bf00      	nop
 8000b54:	2000005c 	.word	0x2000005c

08000b58 <__sread>:
 8000b58:	b510      	push	{r4, lr}
 8000b5a:	460c      	mov	r4, r1
 8000b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b60:	f000 f8fc 	bl	8000d5c <_read_r>
 8000b64:	2800      	cmp	r0, #0
 8000b66:	bfab      	itete	ge
 8000b68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000b6a:	89a3      	ldrhlt	r3, [r4, #12]
 8000b6c:	181b      	addge	r3, r3, r0
 8000b6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000b72:	bfac      	ite	ge
 8000b74:	6563      	strge	r3, [r4, #84]	; 0x54
 8000b76:	81a3      	strhlt	r3, [r4, #12]
 8000b78:	bd10      	pop	{r4, pc}

08000b7a <__swrite>:
 8000b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b7e:	461f      	mov	r7, r3
 8000b80:	898b      	ldrh	r3, [r1, #12]
 8000b82:	05db      	lsls	r3, r3, #23
 8000b84:	4605      	mov	r5, r0
 8000b86:	460c      	mov	r4, r1
 8000b88:	4616      	mov	r6, r2
 8000b8a:	d505      	bpl.n	8000b98 <__swrite+0x1e>
 8000b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b90:	2302      	movs	r3, #2
 8000b92:	2200      	movs	r2, #0
 8000b94:	f000 f8d0 	bl	8000d38 <_lseek_r>
 8000b98:	89a3      	ldrh	r3, [r4, #12]
 8000b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ba2:	81a3      	strh	r3, [r4, #12]
 8000ba4:	4632      	mov	r2, r6
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	4628      	mov	r0, r5
 8000baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000bae:	f000 b8e7 	b.w	8000d80 <_write_r>

08000bb2 <__sseek>:
 8000bb2:	b510      	push	{r4, lr}
 8000bb4:	460c      	mov	r4, r1
 8000bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bba:	f000 f8bd 	bl	8000d38 <_lseek_r>
 8000bbe:	1c43      	adds	r3, r0, #1
 8000bc0:	89a3      	ldrh	r3, [r4, #12]
 8000bc2:	bf15      	itete	ne
 8000bc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8000bc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000bca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000bce:	81a3      	strheq	r3, [r4, #12]
 8000bd0:	bf18      	it	ne
 8000bd2:	81a3      	strhne	r3, [r4, #12]
 8000bd4:	bd10      	pop	{r4, pc}

08000bd6 <__sclose>:
 8000bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bda:	f000 b89d 	b.w	8000d18 <_close_r>

08000bde <__swbuf_r>:
 8000bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be0:	460e      	mov	r6, r1
 8000be2:	4614      	mov	r4, r2
 8000be4:	4605      	mov	r5, r0
 8000be6:	b118      	cbz	r0, 8000bf0 <__swbuf_r+0x12>
 8000be8:	6a03      	ldr	r3, [r0, #32]
 8000bea:	b90b      	cbnz	r3, 8000bf0 <__swbuf_r+0x12>
 8000bec:	f7ff ff22 	bl	8000a34 <__sinit>
 8000bf0:	69a3      	ldr	r3, [r4, #24]
 8000bf2:	60a3      	str	r3, [r4, #8]
 8000bf4:	89a3      	ldrh	r3, [r4, #12]
 8000bf6:	071a      	lsls	r2, r3, #28
 8000bf8:	d525      	bpl.n	8000c46 <__swbuf_r+0x68>
 8000bfa:	6923      	ldr	r3, [r4, #16]
 8000bfc:	b31b      	cbz	r3, 8000c46 <__swbuf_r+0x68>
 8000bfe:	6823      	ldr	r3, [r4, #0]
 8000c00:	6922      	ldr	r2, [r4, #16]
 8000c02:	1a98      	subs	r0, r3, r2
 8000c04:	6963      	ldr	r3, [r4, #20]
 8000c06:	b2f6      	uxtb	r6, r6
 8000c08:	4283      	cmp	r3, r0
 8000c0a:	4637      	mov	r7, r6
 8000c0c:	dc04      	bgt.n	8000c18 <__swbuf_r+0x3a>
 8000c0e:	4621      	mov	r1, r4
 8000c10:	4628      	mov	r0, r5
 8000c12:	f000 fa6d 	bl	80010f0 <_fflush_r>
 8000c16:	b9e0      	cbnz	r0, 8000c52 <__swbuf_r+0x74>
 8000c18:	68a3      	ldr	r3, [r4, #8]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	60a3      	str	r3, [r4, #8]
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	6022      	str	r2, [r4, #0]
 8000c24:	701e      	strb	r6, [r3, #0]
 8000c26:	6962      	ldr	r2, [r4, #20]
 8000c28:	1c43      	adds	r3, r0, #1
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d004      	beq.n	8000c38 <__swbuf_r+0x5a>
 8000c2e:	89a3      	ldrh	r3, [r4, #12]
 8000c30:	07db      	lsls	r3, r3, #31
 8000c32:	d506      	bpl.n	8000c42 <__swbuf_r+0x64>
 8000c34:	2e0a      	cmp	r6, #10
 8000c36:	d104      	bne.n	8000c42 <__swbuf_r+0x64>
 8000c38:	4621      	mov	r1, r4
 8000c3a:	4628      	mov	r0, r5
 8000c3c:	f000 fa58 	bl	80010f0 <_fflush_r>
 8000c40:	b938      	cbnz	r0, 8000c52 <__swbuf_r+0x74>
 8000c42:	4638      	mov	r0, r7
 8000c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c46:	4621      	mov	r1, r4
 8000c48:	4628      	mov	r0, r5
 8000c4a:	f000 f805 	bl	8000c58 <__swsetup_r>
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	d0d5      	beq.n	8000bfe <__swbuf_r+0x20>
 8000c52:	f04f 37ff 	mov.w	r7, #4294967295
 8000c56:	e7f4      	b.n	8000c42 <__swbuf_r+0x64>

08000c58 <__swsetup_r>:
 8000c58:	b538      	push	{r3, r4, r5, lr}
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <__swsetup_r+0xac>)
 8000c5c:	4605      	mov	r5, r0
 8000c5e:	6818      	ldr	r0, [r3, #0]
 8000c60:	460c      	mov	r4, r1
 8000c62:	b118      	cbz	r0, 8000c6c <__swsetup_r+0x14>
 8000c64:	6a03      	ldr	r3, [r0, #32]
 8000c66:	b90b      	cbnz	r3, 8000c6c <__swsetup_r+0x14>
 8000c68:	f7ff fee4 	bl	8000a34 <__sinit>
 8000c6c:	89a3      	ldrh	r3, [r4, #12]
 8000c6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c72:	0718      	lsls	r0, r3, #28
 8000c74:	d422      	bmi.n	8000cbc <__swsetup_r+0x64>
 8000c76:	06d9      	lsls	r1, r3, #27
 8000c78:	d407      	bmi.n	8000c8a <__swsetup_r+0x32>
 8000c7a:	2309      	movs	r3, #9
 8000c7c:	602b      	str	r3, [r5, #0]
 8000c7e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000c82:	81a3      	strh	r3, [r4, #12]
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	e034      	b.n	8000cf4 <__swsetup_r+0x9c>
 8000c8a:	0758      	lsls	r0, r3, #29
 8000c8c:	d512      	bpl.n	8000cb4 <__swsetup_r+0x5c>
 8000c8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c90:	b141      	cbz	r1, 8000ca4 <__swsetup_r+0x4c>
 8000c92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c96:	4299      	cmp	r1, r3
 8000c98:	d002      	beq.n	8000ca0 <__swsetup_r+0x48>
 8000c9a:	4628      	mov	r0, r5
 8000c9c:	f000 f8b0 	bl	8000e00 <_free_r>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	6363      	str	r3, [r4, #52]	; 0x34
 8000ca4:	89a3      	ldrh	r3, [r4, #12]
 8000ca6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000caa:	81a3      	strh	r3, [r4, #12]
 8000cac:	2300      	movs	r3, #0
 8000cae:	6063      	str	r3, [r4, #4]
 8000cb0:	6923      	ldr	r3, [r4, #16]
 8000cb2:	6023      	str	r3, [r4, #0]
 8000cb4:	89a3      	ldrh	r3, [r4, #12]
 8000cb6:	f043 0308 	orr.w	r3, r3, #8
 8000cba:	81a3      	strh	r3, [r4, #12]
 8000cbc:	6923      	ldr	r3, [r4, #16]
 8000cbe:	b94b      	cbnz	r3, 8000cd4 <__swsetup_r+0x7c>
 8000cc0:	89a3      	ldrh	r3, [r4, #12]
 8000cc2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000cc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cca:	d003      	beq.n	8000cd4 <__swsetup_r+0x7c>
 8000ccc:	4621      	mov	r1, r4
 8000cce:	4628      	mov	r0, r5
 8000cd0:	f000 fa5c 	bl	800118c <__smakebuf_r>
 8000cd4:	89a0      	ldrh	r0, [r4, #12]
 8000cd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000cda:	f010 0301 	ands.w	r3, r0, #1
 8000cde:	d00a      	beq.n	8000cf6 <__swsetup_r+0x9e>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60a3      	str	r3, [r4, #8]
 8000ce4:	6963      	ldr	r3, [r4, #20]
 8000ce6:	425b      	negs	r3, r3
 8000ce8:	61a3      	str	r3, [r4, #24]
 8000cea:	6923      	ldr	r3, [r4, #16]
 8000cec:	b943      	cbnz	r3, 8000d00 <__swsetup_r+0xa8>
 8000cee:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000cf2:	d1c4      	bne.n	8000c7e <__swsetup_r+0x26>
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	0781      	lsls	r1, r0, #30
 8000cf8:	bf58      	it	pl
 8000cfa:	6963      	ldrpl	r3, [r4, #20]
 8000cfc:	60a3      	str	r3, [r4, #8]
 8000cfe:	e7f4      	b.n	8000cea <__swsetup_r+0x92>
 8000d00:	2000      	movs	r0, #0
 8000d02:	e7f7      	b.n	8000cf4 <__swsetup_r+0x9c>
 8000d04:	2000005c 	.word	0x2000005c

08000d08 <memset>:
 8000d08:	4402      	add	r2, r0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d100      	bne.n	8000d12 <memset+0xa>
 8000d10:	4770      	bx	lr
 8000d12:	f803 1b01 	strb.w	r1, [r3], #1
 8000d16:	e7f9      	b.n	8000d0c <memset+0x4>

08000d18 <_close_r>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	4d06      	ldr	r5, [pc, #24]	; (8000d34 <_close_r+0x1c>)
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	4608      	mov	r0, r1
 8000d22:	602b      	str	r3, [r5, #0]
 8000d24:	f7ff fd69 	bl	80007fa <_close>
 8000d28:	1c43      	adds	r3, r0, #1
 8000d2a:	d102      	bne.n	8000d32 <_close_r+0x1a>
 8000d2c:	682b      	ldr	r3, [r5, #0]
 8000d2e:	b103      	cbz	r3, 8000d32 <_close_r+0x1a>
 8000d30:	6023      	str	r3, [r4, #0]
 8000d32:	bd38      	pop	{r3, r4, r5, pc}
 8000d34:	20000210 	.word	0x20000210

08000d38 <_lseek_r>:
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	4d07      	ldr	r5, [pc, #28]	; (8000d58 <_lseek_r+0x20>)
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	4611      	mov	r1, r2
 8000d42:	2200      	movs	r2, #0
 8000d44:	602a      	str	r2, [r5, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	f7ff fd7b 	bl	8000842 <_lseek>
 8000d4c:	1c43      	adds	r3, r0, #1
 8000d4e:	d102      	bne.n	8000d56 <_lseek_r+0x1e>
 8000d50:	682b      	ldr	r3, [r5, #0]
 8000d52:	b103      	cbz	r3, 8000d56 <_lseek_r+0x1e>
 8000d54:	6023      	str	r3, [r4, #0]
 8000d56:	bd38      	pop	{r3, r4, r5, pc}
 8000d58:	20000210 	.word	0x20000210

08000d5c <_read_r>:
 8000d5c:	b538      	push	{r3, r4, r5, lr}
 8000d5e:	4d07      	ldr	r5, [pc, #28]	; (8000d7c <_read_r+0x20>)
 8000d60:	4604      	mov	r4, r0
 8000d62:	4608      	mov	r0, r1
 8000d64:	4611      	mov	r1, r2
 8000d66:	2200      	movs	r2, #0
 8000d68:	602a      	str	r2, [r5, #0]
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	f7ff fd0c 	bl	8000788 <_read>
 8000d70:	1c43      	adds	r3, r0, #1
 8000d72:	d102      	bne.n	8000d7a <_read_r+0x1e>
 8000d74:	682b      	ldr	r3, [r5, #0]
 8000d76:	b103      	cbz	r3, 8000d7a <_read_r+0x1e>
 8000d78:	6023      	str	r3, [r4, #0]
 8000d7a:	bd38      	pop	{r3, r4, r5, pc}
 8000d7c:	20000210 	.word	0x20000210

08000d80 <_write_r>:
 8000d80:	b538      	push	{r3, r4, r5, lr}
 8000d82:	4d07      	ldr	r5, [pc, #28]	; (8000da0 <_write_r+0x20>)
 8000d84:	4604      	mov	r4, r0
 8000d86:	4608      	mov	r0, r1
 8000d88:	4611      	mov	r1, r2
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	602a      	str	r2, [r5, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	f7ff fd17 	bl	80007c2 <_write>
 8000d94:	1c43      	adds	r3, r0, #1
 8000d96:	d102      	bne.n	8000d9e <_write_r+0x1e>
 8000d98:	682b      	ldr	r3, [r5, #0]
 8000d9a:	b103      	cbz	r3, 8000d9e <_write_r+0x1e>
 8000d9c:	6023      	str	r3, [r4, #0]
 8000d9e:	bd38      	pop	{r3, r4, r5, pc}
 8000da0:	20000210 	.word	0x20000210

08000da4 <__errno>:
 8000da4:	4b01      	ldr	r3, [pc, #4]	; (8000dac <__errno+0x8>)
 8000da6:	6818      	ldr	r0, [r3, #0]
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	2000005c 	.word	0x2000005c

08000db0 <__libc_init_array>:
 8000db0:	b570      	push	{r4, r5, r6, lr}
 8000db2:	4d0d      	ldr	r5, [pc, #52]	; (8000de8 <__libc_init_array+0x38>)
 8000db4:	4c0d      	ldr	r4, [pc, #52]	; (8000dec <__libc_init_array+0x3c>)
 8000db6:	1b64      	subs	r4, r4, r5
 8000db8:	10a4      	asrs	r4, r4, #2
 8000dba:	2600      	movs	r6, #0
 8000dbc:	42a6      	cmp	r6, r4
 8000dbe:	d109      	bne.n	8000dd4 <__libc_init_array+0x24>
 8000dc0:	4d0b      	ldr	r5, [pc, #44]	; (8000df0 <__libc_init_array+0x40>)
 8000dc2:	4c0c      	ldr	r4, [pc, #48]	; (8000df4 <__libc_init_array+0x44>)
 8000dc4:	f000 fa50 	bl	8001268 <_init>
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	10a4      	asrs	r4, r4, #2
 8000dcc:	2600      	movs	r6, #0
 8000dce:	42a6      	cmp	r6, r4
 8000dd0:	d105      	bne.n	8000dde <__libc_init_array+0x2e>
 8000dd2:	bd70      	pop	{r4, r5, r6, pc}
 8000dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000dd8:	4798      	blx	r3
 8000dda:	3601      	adds	r6, #1
 8000ddc:	e7ee      	b.n	8000dbc <__libc_init_array+0xc>
 8000dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8000de2:	4798      	blx	r3
 8000de4:	3601      	adds	r6, #1
 8000de6:	e7f2      	b.n	8000dce <__libc_init_array+0x1e>
 8000de8:	080012c8 	.word	0x080012c8
 8000dec:	080012c8 	.word	0x080012c8
 8000df0:	080012c8 	.word	0x080012c8
 8000df4:	080012cc 	.word	0x080012cc

08000df8 <__retarget_lock_init_recursive>:
 8000df8:	4770      	bx	lr

08000dfa <__retarget_lock_acquire_recursive>:
 8000dfa:	4770      	bx	lr

08000dfc <__retarget_lock_release_recursive>:
 8000dfc:	4770      	bx	lr
	...

08000e00 <_free_r>:
 8000e00:	b538      	push	{r3, r4, r5, lr}
 8000e02:	4605      	mov	r5, r0
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d041      	beq.n	8000e8c <_free_r+0x8c>
 8000e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e0c:	1f0c      	subs	r4, r1, #4
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	bfb8      	it	lt
 8000e12:	18e4      	addlt	r4, r4, r3
 8000e14:	f000 f8de 	bl	8000fd4 <__malloc_lock>
 8000e18:	4a1d      	ldr	r2, [pc, #116]	; (8000e90 <_free_r+0x90>)
 8000e1a:	6813      	ldr	r3, [r2, #0]
 8000e1c:	b933      	cbnz	r3, 8000e2c <_free_r+0x2c>
 8000e1e:	6063      	str	r3, [r4, #4]
 8000e20:	6014      	str	r4, [r2, #0]
 8000e22:	4628      	mov	r0, r5
 8000e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e28:	f000 b8da 	b.w	8000fe0 <__malloc_unlock>
 8000e2c:	42a3      	cmp	r3, r4
 8000e2e:	d908      	bls.n	8000e42 <_free_r+0x42>
 8000e30:	6820      	ldr	r0, [r4, #0]
 8000e32:	1821      	adds	r1, r4, r0
 8000e34:	428b      	cmp	r3, r1
 8000e36:	bf01      	itttt	eq
 8000e38:	6819      	ldreq	r1, [r3, #0]
 8000e3a:	685b      	ldreq	r3, [r3, #4]
 8000e3c:	1809      	addeq	r1, r1, r0
 8000e3e:	6021      	streq	r1, [r4, #0]
 8000e40:	e7ed      	b.n	8000e1e <_free_r+0x1e>
 8000e42:	461a      	mov	r2, r3
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	b10b      	cbz	r3, 8000e4c <_free_r+0x4c>
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d9fa      	bls.n	8000e42 <_free_r+0x42>
 8000e4c:	6811      	ldr	r1, [r2, #0]
 8000e4e:	1850      	adds	r0, r2, r1
 8000e50:	42a0      	cmp	r0, r4
 8000e52:	d10b      	bne.n	8000e6c <_free_r+0x6c>
 8000e54:	6820      	ldr	r0, [r4, #0]
 8000e56:	4401      	add	r1, r0
 8000e58:	1850      	adds	r0, r2, r1
 8000e5a:	4283      	cmp	r3, r0
 8000e5c:	6011      	str	r1, [r2, #0]
 8000e5e:	d1e0      	bne.n	8000e22 <_free_r+0x22>
 8000e60:	6818      	ldr	r0, [r3, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	6053      	str	r3, [r2, #4]
 8000e66:	4408      	add	r0, r1
 8000e68:	6010      	str	r0, [r2, #0]
 8000e6a:	e7da      	b.n	8000e22 <_free_r+0x22>
 8000e6c:	d902      	bls.n	8000e74 <_free_r+0x74>
 8000e6e:	230c      	movs	r3, #12
 8000e70:	602b      	str	r3, [r5, #0]
 8000e72:	e7d6      	b.n	8000e22 <_free_r+0x22>
 8000e74:	6820      	ldr	r0, [r4, #0]
 8000e76:	1821      	adds	r1, r4, r0
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	bf04      	itt	eq
 8000e7c:	6819      	ldreq	r1, [r3, #0]
 8000e7e:	685b      	ldreq	r3, [r3, #4]
 8000e80:	6063      	str	r3, [r4, #4]
 8000e82:	bf04      	itt	eq
 8000e84:	1809      	addeq	r1, r1, r0
 8000e86:	6021      	streq	r1, [r4, #0]
 8000e88:	6054      	str	r4, [r2, #4]
 8000e8a:	e7ca      	b.n	8000e22 <_free_r+0x22>
 8000e8c:	bd38      	pop	{r3, r4, r5, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000218 	.word	0x20000218

08000e94 <sbrk_aligned>:
 8000e94:	b570      	push	{r4, r5, r6, lr}
 8000e96:	4e0e      	ldr	r6, [pc, #56]	; (8000ed0 <sbrk_aligned+0x3c>)
 8000e98:	460c      	mov	r4, r1
 8000e9a:	6831      	ldr	r1, [r6, #0]
 8000e9c:	4605      	mov	r5, r0
 8000e9e:	b911      	cbnz	r1, 8000ea6 <sbrk_aligned+0x12>
 8000ea0:	f000 f9d2 	bl	8001248 <_sbrk_r>
 8000ea4:	6030      	str	r0, [r6, #0]
 8000ea6:	4621      	mov	r1, r4
 8000ea8:	4628      	mov	r0, r5
 8000eaa:	f000 f9cd 	bl	8001248 <_sbrk_r>
 8000eae:	1c43      	adds	r3, r0, #1
 8000eb0:	d00a      	beq.n	8000ec8 <sbrk_aligned+0x34>
 8000eb2:	1cc4      	adds	r4, r0, #3
 8000eb4:	f024 0403 	bic.w	r4, r4, #3
 8000eb8:	42a0      	cmp	r0, r4
 8000eba:	d007      	beq.n	8000ecc <sbrk_aligned+0x38>
 8000ebc:	1a21      	subs	r1, r4, r0
 8000ebe:	4628      	mov	r0, r5
 8000ec0:	f000 f9c2 	bl	8001248 <_sbrk_r>
 8000ec4:	3001      	adds	r0, #1
 8000ec6:	d101      	bne.n	8000ecc <sbrk_aligned+0x38>
 8000ec8:	f04f 34ff 	mov.w	r4, #4294967295
 8000ecc:	4620      	mov	r0, r4
 8000ece:	bd70      	pop	{r4, r5, r6, pc}
 8000ed0:	2000021c 	.word	0x2000021c

08000ed4 <_malloc_r>:
 8000ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ed8:	1ccd      	adds	r5, r1, #3
 8000eda:	f025 0503 	bic.w	r5, r5, #3
 8000ede:	3508      	adds	r5, #8
 8000ee0:	2d0c      	cmp	r5, #12
 8000ee2:	bf38      	it	cc
 8000ee4:	250c      	movcc	r5, #12
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	4607      	mov	r7, r0
 8000eea:	db01      	blt.n	8000ef0 <_malloc_r+0x1c>
 8000eec:	42a9      	cmp	r1, r5
 8000eee:	d905      	bls.n	8000efc <_malloc_r+0x28>
 8000ef0:	230c      	movs	r3, #12
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	2600      	movs	r6, #0
 8000ef6:	4630      	mov	r0, r6
 8000ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000efc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000fd0 <_malloc_r+0xfc>
 8000f00:	f000 f868 	bl	8000fd4 <__malloc_lock>
 8000f04:	f8d8 3000 	ldr.w	r3, [r8]
 8000f08:	461c      	mov	r4, r3
 8000f0a:	bb5c      	cbnz	r4, 8000f64 <_malloc_r+0x90>
 8000f0c:	4629      	mov	r1, r5
 8000f0e:	4638      	mov	r0, r7
 8000f10:	f7ff ffc0 	bl	8000e94 <sbrk_aligned>
 8000f14:	1c43      	adds	r3, r0, #1
 8000f16:	4604      	mov	r4, r0
 8000f18:	d155      	bne.n	8000fc6 <_malloc_r+0xf2>
 8000f1a:	f8d8 4000 	ldr.w	r4, [r8]
 8000f1e:	4626      	mov	r6, r4
 8000f20:	2e00      	cmp	r6, #0
 8000f22:	d145      	bne.n	8000fb0 <_malloc_r+0xdc>
 8000f24:	2c00      	cmp	r4, #0
 8000f26:	d048      	beq.n	8000fba <_malloc_r+0xe6>
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	4631      	mov	r1, r6
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	eb04 0903 	add.w	r9, r4, r3
 8000f32:	f000 f989 	bl	8001248 <_sbrk_r>
 8000f36:	4581      	cmp	r9, r0
 8000f38:	d13f      	bne.n	8000fba <_malloc_r+0xe6>
 8000f3a:	6821      	ldr	r1, [r4, #0]
 8000f3c:	1a6d      	subs	r5, r5, r1
 8000f3e:	4629      	mov	r1, r5
 8000f40:	4638      	mov	r0, r7
 8000f42:	f7ff ffa7 	bl	8000e94 <sbrk_aligned>
 8000f46:	3001      	adds	r0, #1
 8000f48:	d037      	beq.n	8000fba <_malloc_r+0xe6>
 8000f4a:	6823      	ldr	r3, [r4, #0]
 8000f4c:	442b      	add	r3, r5
 8000f4e:	6023      	str	r3, [r4, #0]
 8000f50:	f8d8 3000 	ldr.w	r3, [r8]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d038      	beq.n	8000fca <_malloc_r+0xf6>
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	42a2      	cmp	r2, r4
 8000f5c:	d12b      	bne.n	8000fb6 <_malloc_r+0xe2>
 8000f5e:	2200      	movs	r2, #0
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	e00f      	b.n	8000f84 <_malloc_r+0xb0>
 8000f64:	6822      	ldr	r2, [r4, #0]
 8000f66:	1b52      	subs	r2, r2, r5
 8000f68:	d41f      	bmi.n	8000faa <_malloc_r+0xd6>
 8000f6a:	2a0b      	cmp	r2, #11
 8000f6c:	d917      	bls.n	8000f9e <_malloc_r+0xca>
 8000f6e:	1961      	adds	r1, r4, r5
 8000f70:	42a3      	cmp	r3, r4
 8000f72:	6025      	str	r5, [r4, #0]
 8000f74:	bf18      	it	ne
 8000f76:	6059      	strne	r1, [r3, #4]
 8000f78:	6863      	ldr	r3, [r4, #4]
 8000f7a:	bf08      	it	eq
 8000f7c:	f8c8 1000 	streq.w	r1, [r8]
 8000f80:	5162      	str	r2, [r4, r5]
 8000f82:	604b      	str	r3, [r1, #4]
 8000f84:	4638      	mov	r0, r7
 8000f86:	f104 060b 	add.w	r6, r4, #11
 8000f8a:	f000 f829 	bl	8000fe0 <__malloc_unlock>
 8000f8e:	f026 0607 	bic.w	r6, r6, #7
 8000f92:	1d23      	adds	r3, r4, #4
 8000f94:	1af2      	subs	r2, r6, r3
 8000f96:	d0ae      	beq.n	8000ef6 <_malloc_r+0x22>
 8000f98:	1b9b      	subs	r3, r3, r6
 8000f9a:	50a3      	str	r3, [r4, r2]
 8000f9c:	e7ab      	b.n	8000ef6 <_malloc_r+0x22>
 8000f9e:	42a3      	cmp	r3, r4
 8000fa0:	6862      	ldr	r2, [r4, #4]
 8000fa2:	d1dd      	bne.n	8000f60 <_malloc_r+0x8c>
 8000fa4:	f8c8 2000 	str.w	r2, [r8]
 8000fa8:	e7ec      	b.n	8000f84 <_malloc_r+0xb0>
 8000faa:	4623      	mov	r3, r4
 8000fac:	6864      	ldr	r4, [r4, #4]
 8000fae:	e7ac      	b.n	8000f0a <_malloc_r+0x36>
 8000fb0:	4634      	mov	r4, r6
 8000fb2:	6876      	ldr	r6, [r6, #4]
 8000fb4:	e7b4      	b.n	8000f20 <_malloc_r+0x4c>
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	e7cc      	b.n	8000f54 <_malloc_r+0x80>
 8000fba:	230c      	movs	r3, #12
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	4638      	mov	r0, r7
 8000fc0:	f000 f80e 	bl	8000fe0 <__malloc_unlock>
 8000fc4:	e797      	b.n	8000ef6 <_malloc_r+0x22>
 8000fc6:	6025      	str	r5, [r4, #0]
 8000fc8:	e7dc      	b.n	8000f84 <_malloc_r+0xb0>
 8000fca:	605b      	str	r3, [r3, #4]
 8000fcc:	deff      	udf	#255	; 0xff
 8000fce:	bf00      	nop
 8000fd0:	20000218 	.word	0x20000218

08000fd4 <__malloc_lock>:
 8000fd4:	4801      	ldr	r0, [pc, #4]	; (8000fdc <__malloc_lock+0x8>)
 8000fd6:	f7ff bf10 	b.w	8000dfa <__retarget_lock_acquire_recursive>
 8000fda:	bf00      	nop
 8000fdc:	20000214 	.word	0x20000214

08000fe0 <__malloc_unlock>:
 8000fe0:	4801      	ldr	r0, [pc, #4]	; (8000fe8 <__malloc_unlock+0x8>)
 8000fe2:	f7ff bf0b 	b.w	8000dfc <__retarget_lock_release_recursive>
 8000fe6:	bf00      	nop
 8000fe8:	20000214 	.word	0x20000214

08000fec <__sflush_r>:
 8000fec:	898a      	ldrh	r2, [r1, #12]
 8000fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff0:	4605      	mov	r5, r0
 8000ff2:	0710      	lsls	r0, r2, #28
 8000ff4:	460c      	mov	r4, r1
 8000ff6:	d457      	bmi.n	80010a8 <__sflush_r+0xbc>
 8000ff8:	684b      	ldr	r3, [r1, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	dc04      	bgt.n	8001008 <__sflush_r+0x1c>
 8000ffe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001000:	2b00      	cmp	r3, #0
 8001002:	dc01      	bgt.n	8001008 <__sflush_r+0x1c>
 8001004:	2000      	movs	r0, #0
 8001006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001008:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800100a:	2e00      	cmp	r6, #0
 800100c:	d0fa      	beq.n	8001004 <__sflush_r+0x18>
 800100e:	2300      	movs	r3, #0
 8001010:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001014:	682f      	ldr	r7, [r5, #0]
 8001016:	6a21      	ldr	r1, [r4, #32]
 8001018:	602b      	str	r3, [r5, #0]
 800101a:	d032      	beq.n	8001082 <__sflush_r+0x96>
 800101c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800101e:	89a3      	ldrh	r3, [r4, #12]
 8001020:	075a      	lsls	r2, r3, #29
 8001022:	d505      	bpl.n	8001030 <__sflush_r+0x44>
 8001024:	6863      	ldr	r3, [r4, #4]
 8001026:	1ac0      	subs	r0, r0, r3
 8001028:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800102a:	b10b      	cbz	r3, 8001030 <__sflush_r+0x44>
 800102c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800102e:	1ac0      	subs	r0, r0, r3
 8001030:	2300      	movs	r3, #0
 8001032:	4602      	mov	r2, r0
 8001034:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001036:	6a21      	ldr	r1, [r4, #32]
 8001038:	4628      	mov	r0, r5
 800103a:	47b0      	blx	r6
 800103c:	1c43      	adds	r3, r0, #1
 800103e:	89a3      	ldrh	r3, [r4, #12]
 8001040:	d106      	bne.n	8001050 <__sflush_r+0x64>
 8001042:	6829      	ldr	r1, [r5, #0]
 8001044:	291d      	cmp	r1, #29
 8001046:	d82b      	bhi.n	80010a0 <__sflush_r+0xb4>
 8001048:	4a28      	ldr	r2, [pc, #160]	; (80010ec <__sflush_r+0x100>)
 800104a:	410a      	asrs	r2, r1
 800104c:	07d6      	lsls	r6, r2, #31
 800104e:	d427      	bmi.n	80010a0 <__sflush_r+0xb4>
 8001050:	2200      	movs	r2, #0
 8001052:	6062      	str	r2, [r4, #4]
 8001054:	04d9      	lsls	r1, r3, #19
 8001056:	6922      	ldr	r2, [r4, #16]
 8001058:	6022      	str	r2, [r4, #0]
 800105a:	d504      	bpl.n	8001066 <__sflush_r+0x7a>
 800105c:	1c42      	adds	r2, r0, #1
 800105e:	d101      	bne.n	8001064 <__sflush_r+0x78>
 8001060:	682b      	ldr	r3, [r5, #0]
 8001062:	b903      	cbnz	r3, 8001066 <__sflush_r+0x7a>
 8001064:	6560      	str	r0, [r4, #84]	; 0x54
 8001066:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001068:	602f      	str	r7, [r5, #0]
 800106a:	2900      	cmp	r1, #0
 800106c:	d0ca      	beq.n	8001004 <__sflush_r+0x18>
 800106e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001072:	4299      	cmp	r1, r3
 8001074:	d002      	beq.n	800107c <__sflush_r+0x90>
 8001076:	4628      	mov	r0, r5
 8001078:	f7ff fec2 	bl	8000e00 <_free_r>
 800107c:	2000      	movs	r0, #0
 800107e:	6360      	str	r0, [r4, #52]	; 0x34
 8001080:	e7c1      	b.n	8001006 <__sflush_r+0x1a>
 8001082:	2301      	movs	r3, #1
 8001084:	4628      	mov	r0, r5
 8001086:	47b0      	blx	r6
 8001088:	1c41      	adds	r1, r0, #1
 800108a:	d1c8      	bne.n	800101e <__sflush_r+0x32>
 800108c:	682b      	ldr	r3, [r5, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0c5      	beq.n	800101e <__sflush_r+0x32>
 8001092:	2b1d      	cmp	r3, #29
 8001094:	d001      	beq.n	800109a <__sflush_r+0xae>
 8001096:	2b16      	cmp	r3, #22
 8001098:	d101      	bne.n	800109e <__sflush_r+0xb2>
 800109a:	602f      	str	r7, [r5, #0]
 800109c:	e7b2      	b.n	8001004 <__sflush_r+0x18>
 800109e:	89a3      	ldrh	r3, [r4, #12]
 80010a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010a4:	81a3      	strh	r3, [r4, #12]
 80010a6:	e7ae      	b.n	8001006 <__sflush_r+0x1a>
 80010a8:	690f      	ldr	r7, [r1, #16]
 80010aa:	2f00      	cmp	r7, #0
 80010ac:	d0aa      	beq.n	8001004 <__sflush_r+0x18>
 80010ae:	0793      	lsls	r3, r2, #30
 80010b0:	680e      	ldr	r6, [r1, #0]
 80010b2:	bf08      	it	eq
 80010b4:	694b      	ldreq	r3, [r1, #20]
 80010b6:	600f      	str	r7, [r1, #0]
 80010b8:	bf18      	it	ne
 80010ba:	2300      	movne	r3, #0
 80010bc:	1bf6      	subs	r6, r6, r7
 80010be:	608b      	str	r3, [r1, #8]
 80010c0:	2e00      	cmp	r6, #0
 80010c2:	dd9f      	ble.n	8001004 <__sflush_r+0x18>
 80010c4:	6a21      	ldr	r1, [r4, #32]
 80010c6:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80010ca:	4633      	mov	r3, r6
 80010cc:	463a      	mov	r2, r7
 80010ce:	4628      	mov	r0, r5
 80010d0:	47e0      	blx	ip
 80010d2:	2800      	cmp	r0, #0
 80010d4:	dc06      	bgt.n	80010e4 <__sflush_r+0xf8>
 80010d6:	89a3      	ldrh	r3, [r4, #12]
 80010d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010dc:	81a3      	strh	r3, [r4, #12]
 80010de:	f04f 30ff 	mov.w	r0, #4294967295
 80010e2:	e790      	b.n	8001006 <__sflush_r+0x1a>
 80010e4:	4407      	add	r7, r0
 80010e6:	1a36      	subs	r6, r6, r0
 80010e8:	e7ea      	b.n	80010c0 <__sflush_r+0xd4>
 80010ea:	bf00      	nop
 80010ec:	dfbffffe 	.word	0xdfbffffe

080010f0 <_fflush_r>:
 80010f0:	b538      	push	{r3, r4, r5, lr}
 80010f2:	690b      	ldr	r3, [r1, #16]
 80010f4:	4605      	mov	r5, r0
 80010f6:	460c      	mov	r4, r1
 80010f8:	b913      	cbnz	r3, 8001100 <_fflush_r+0x10>
 80010fa:	2500      	movs	r5, #0
 80010fc:	4628      	mov	r0, r5
 80010fe:	bd38      	pop	{r3, r4, r5, pc}
 8001100:	b118      	cbz	r0, 800110a <_fflush_r+0x1a>
 8001102:	6a03      	ldr	r3, [r0, #32]
 8001104:	b90b      	cbnz	r3, 800110a <_fflush_r+0x1a>
 8001106:	f7ff fc95 	bl	8000a34 <__sinit>
 800110a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f3      	beq.n	80010fa <_fflush_r+0xa>
 8001112:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001114:	07d0      	lsls	r0, r2, #31
 8001116:	d404      	bmi.n	8001122 <_fflush_r+0x32>
 8001118:	0599      	lsls	r1, r3, #22
 800111a:	d402      	bmi.n	8001122 <_fflush_r+0x32>
 800111c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800111e:	f7ff fe6c 	bl	8000dfa <__retarget_lock_acquire_recursive>
 8001122:	4628      	mov	r0, r5
 8001124:	4621      	mov	r1, r4
 8001126:	f7ff ff61 	bl	8000fec <__sflush_r>
 800112a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800112c:	07da      	lsls	r2, r3, #31
 800112e:	4605      	mov	r5, r0
 8001130:	d4e4      	bmi.n	80010fc <_fflush_r+0xc>
 8001132:	89a3      	ldrh	r3, [r4, #12]
 8001134:	059b      	lsls	r3, r3, #22
 8001136:	d4e1      	bmi.n	80010fc <_fflush_r+0xc>
 8001138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800113a:	f7ff fe5f 	bl	8000dfc <__retarget_lock_release_recursive>
 800113e:	e7dd      	b.n	80010fc <_fflush_r+0xc>

08001140 <__swhatbuf_r>:
 8001140:	b570      	push	{r4, r5, r6, lr}
 8001142:	460c      	mov	r4, r1
 8001144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001148:	2900      	cmp	r1, #0
 800114a:	b096      	sub	sp, #88	; 0x58
 800114c:	4615      	mov	r5, r2
 800114e:	461e      	mov	r6, r3
 8001150:	da0d      	bge.n	800116e <__swhatbuf_r+0x2e>
 8001152:	89a3      	ldrh	r3, [r4, #12]
 8001154:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001158:	f04f 0100 	mov.w	r1, #0
 800115c:	bf0c      	ite	eq
 800115e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001162:	2340      	movne	r3, #64	; 0x40
 8001164:	2000      	movs	r0, #0
 8001166:	6031      	str	r1, [r6, #0]
 8001168:	602b      	str	r3, [r5, #0]
 800116a:	b016      	add	sp, #88	; 0x58
 800116c:	bd70      	pop	{r4, r5, r6, pc}
 800116e:	466a      	mov	r2, sp
 8001170:	f000 f848 	bl	8001204 <_fstat_r>
 8001174:	2800      	cmp	r0, #0
 8001176:	dbec      	blt.n	8001152 <__swhatbuf_r+0x12>
 8001178:	9901      	ldr	r1, [sp, #4]
 800117a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800117e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001182:	4259      	negs	r1, r3
 8001184:	4159      	adcs	r1, r3
 8001186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800118a:	e7eb      	b.n	8001164 <__swhatbuf_r+0x24>

0800118c <__smakebuf_r>:
 800118c:	898b      	ldrh	r3, [r1, #12]
 800118e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001190:	079d      	lsls	r5, r3, #30
 8001192:	4606      	mov	r6, r0
 8001194:	460c      	mov	r4, r1
 8001196:	d507      	bpl.n	80011a8 <__smakebuf_r+0x1c>
 8001198:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800119c:	6023      	str	r3, [r4, #0]
 800119e:	6123      	str	r3, [r4, #16]
 80011a0:	2301      	movs	r3, #1
 80011a2:	6163      	str	r3, [r4, #20]
 80011a4:	b002      	add	sp, #8
 80011a6:	bd70      	pop	{r4, r5, r6, pc}
 80011a8:	ab01      	add	r3, sp, #4
 80011aa:	466a      	mov	r2, sp
 80011ac:	f7ff ffc8 	bl	8001140 <__swhatbuf_r>
 80011b0:	9900      	ldr	r1, [sp, #0]
 80011b2:	4605      	mov	r5, r0
 80011b4:	4630      	mov	r0, r6
 80011b6:	f7ff fe8d 	bl	8000ed4 <_malloc_r>
 80011ba:	b948      	cbnz	r0, 80011d0 <__smakebuf_r+0x44>
 80011bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011c0:	059a      	lsls	r2, r3, #22
 80011c2:	d4ef      	bmi.n	80011a4 <__smakebuf_r+0x18>
 80011c4:	f023 0303 	bic.w	r3, r3, #3
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	81a3      	strh	r3, [r4, #12]
 80011ce:	e7e3      	b.n	8001198 <__smakebuf_r+0xc>
 80011d0:	89a3      	ldrh	r3, [r4, #12]
 80011d2:	6020      	str	r0, [r4, #0]
 80011d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d8:	81a3      	strh	r3, [r4, #12]
 80011da:	9b00      	ldr	r3, [sp, #0]
 80011dc:	6163      	str	r3, [r4, #20]
 80011de:	9b01      	ldr	r3, [sp, #4]
 80011e0:	6120      	str	r0, [r4, #16]
 80011e2:	b15b      	cbz	r3, 80011fc <__smakebuf_r+0x70>
 80011e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80011e8:	4630      	mov	r0, r6
 80011ea:	f000 f81d 	bl	8001228 <_isatty_r>
 80011ee:	b128      	cbz	r0, 80011fc <__smakebuf_r+0x70>
 80011f0:	89a3      	ldrh	r3, [r4, #12]
 80011f2:	f023 0303 	bic.w	r3, r3, #3
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	81a3      	strh	r3, [r4, #12]
 80011fc:	89a3      	ldrh	r3, [r4, #12]
 80011fe:	431d      	orrs	r5, r3
 8001200:	81a5      	strh	r5, [r4, #12]
 8001202:	e7cf      	b.n	80011a4 <__smakebuf_r+0x18>

08001204 <_fstat_r>:
 8001204:	b538      	push	{r3, r4, r5, lr}
 8001206:	4d07      	ldr	r5, [pc, #28]	; (8001224 <_fstat_r+0x20>)
 8001208:	2300      	movs	r3, #0
 800120a:	4604      	mov	r4, r0
 800120c:	4608      	mov	r0, r1
 800120e:	4611      	mov	r1, r2
 8001210:	602b      	str	r3, [r5, #0]
 8001212:	f7ff fafd 	bl	8000810 <_fstat>
 8001216:	1c43      	adds	r3, r0, #1
 8001218:	d102      	bne.n	8001220 <_fstat_r+0x1c>
 800121a:	682b      	ldr	r3, [r5, #0]
 800121c:	b103      	cbz	r3, 8001220 <_fstat_r+0x1c>
 800121e:	6023      	str	r3, [r4, #0]
 8001220:	bd38      	pop	{r3, r4, r5, pc}
 8001222:	bf00      	nop
 8001224:	20000210 	.word	0x20000210

08001228 <_isatty_r>:
 8001228:	b538      	push	{r3, r4, r5, lr}
 800122a:	4d06      	ldr	r5, [pc, #24]	; (8001244 <_isatty_r+0x1c>)
 800122c:	2300      	movs	r3, #0
 800122e:	4604      	mov	r4, r0
 8001230:	4608      	mov	r0, r1
 8001232:	602b      	str	r3, [r5, #0]
 8001234:	f7ff fafb 	bl	800082e <_isatty>
 8001238:	1c43      	adds	r3, r0, #1
 800123a:	d102      	bne.n	8001242 <_isatty_r+0x1a>
 800123c:	682b      	ldr	r3, [r5, #0]
 800123e:	b103      	cbz	r3, 8001242 <_isatty_r+0x1a>
 8001240:	6023      	str	r3, [r4, #0]
 8001242:	bd38      	pop	{r3, r4, r5, pc}
 8001244:	20000210 	.word	0x20000210

08001248 <_sbrk_r>:
 8001248:	b538      	push	{r3, r4, r5, lr}
 800124a:	4d06      	ldr	r5, [pc, #24]	; (8001264 <_sbrk_r+0x1c>)
 800124c:	2300      	movs	r3, #0
 800124e:	4604      	mov	r4, r0
 8001250:	4608      	mov	r0, r1
 8001252:	602b      	str	r3, [r5, #0]
 8001254:	f7ff fb02 	bl	800085c <_sbrk>
 8001258:	1c43      	adds	r3, r0, #1
 800125a:	d102      	bne.n	8001262 <_sbrk_r+0x1a>
 800125c:	682b      	ldr	r3, [r5, #0]
 800125e:	b103      	cbz	r3, 8001262 <_sbrk_r+0x1a>
 8001260:	6023      	str	r3, [r4, #0]
 8001262:	bd38      	pop	{r3, r4, r5, pc}
 8001264:	20000210 	.word	0x20000210

08001268 <_init>:
 8001268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800126a:	bf00      	nop
 800126c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800126e:	bc08      	pop	{r3}
 8001270:	469e      	mov	lr, r3
 8001272:	4770      	bx	lr

08001274 <_fini>:
 8001274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001276:	bf00      	nop
 8001278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800127a:	bc08      	pop	{r3}
 800127c:	469e      	mov	lr, r3
 800127e:	4770      	bx	lr
